test3 <- read.csv("test3.csv", header = TRUE, stringsAsFactors = FALSE, skip = 14)
test3 <- read.csv("test3.csv", header = TRUE, stringsAsFactors = FALSE, skip = 15)
test3 <- read.csv("test3.csv", header = TRUE, stringsAsFactors = FALSE, skip = 3)
test3 <- read.csv("test3.csv", header = TRUE, stringsAsFactors = FALSE, skip = 10)
test3 <- read.csv("test3.csv", header = TRUE, stringsAsFactors = FALSE, skip = 11)
test3 <- read.csv("test3.csv", header = TRUE, stringsAsFactors = FALSE, skip = 12)
test3 <- read.csv("test3.csv", header = TRUE, stringsAsFactors = FALSE, skip = 13)
test3 <- read.csv("test3.csv", header = TRUE, stringsAsFactors = FALSE, skip = 14
)
test3 <- read.csv("test3.csv", header = TRUE, stringsAsFactors = FALSE, skip = 15
)
test3 <- read.csv("test3.csv", header = TRUE, stringsAsFactors = FALSE, skip = 16)
library(readr)
a <- read_csv("test3.csv", skip = 15)
View(a)
a <- read_csv("test3.csv", skip = 16)
writableOutput <- paste(c(stationID,year,month),sep = "_" )
stationID <- "51442"
year <- "1"
month <- "1"
writableOutput <- paste(c(stationID,year,month),sep = "_" )
writableOutput
writableOutput <- paste0(stationID,"_",year,"_",month)
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",1706,"&Year=",2012,"&Month=",12",&Day=14&timeframe=2&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,"_",month,".csv")
curl_download(query, writableOutput)
x <- read_csv(writableOutput, skip = 16)
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",stationID,"&Year=",year,"&Month=",month",&Day=14&timeframe=2&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,"_",month,".csv")
curl_download(query, writableOutput)
x <- read_csv(writableOutput, skip = 16)
read.csv(writableOutput)
View(x)
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",stationID,"&Year=",year,"&Month=",month",&Day=14&timeframe=3&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,"_",month,".csv")
curl_download(query, writableOutput)
x <- read_csv(writableOutput, skip = 16)
View(x)
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",stationID,"&Year=",year,"&Month=",month,"&Day=14&timeframe=3&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,"_",month,".csv")
curl_download(query, writableOutput)
x <- read_csv(writableOutput, skip = 16)
View(x)
x <- read_csv(writableOutput)
View(x)
x <- read_csv(writableOutput, skip = 15)
View(x)
x <- read_csv(writableOutput, skip = 17)
View(x)
x <- read_csv(writableOutput, skip = 14)
x <- read_csv(writableOutput, skip = 13)
x <- read_csv(writableOutput, skip = 12)
x <- read_csv(writableOutput, skip = 11)
x <- read_csv(writableOutput)
x
x <- read_csv(writableOutput, skip = 18)
x
View(x)
x <- read_csv(writableOutput)
x
stationID <- "888"
year <- "1"
month <- "1"
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",stationID,"&Year=",year,"&Month=",month,"&Day=14&timeframe=3&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,"_",month,".csv")
curl_download(query, writableOutput)
x <- read_csv(writableOutput, skip = 18)
View(x)
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",stationID,"&Year=",year,"&Month=",month,"&Day=14&timeframe=2&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,"_",month,".csv")
curl_download(query, writableOutput)
x <- read_csv(writableOutput, skip = 18)
View(x)
x <- read_csv(writableOutput, skip = 23)
View(x)
x <- read_csv(writableOutput, skip = 25)
View(x)
stationID <- "888"
year <- "2005"
month <- "5"
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",stationID,"&Year=",year,"&Month=",month,"&Day=14&timeframe=2&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,"_",month,".csv")
curl_download(query, writableOutput)
# The Environment Canada data is not nicely parsed and contains descriptions in the top rows. The number of rows to skip requires a little bit of trial and error, but it looks like 27 for day/month data, 18 for month/year data, and 16 for hourly/daily.
x <- read_csv(writableOutput, skip = 27)
View(x)
x <- read_csv(writableOutput)
View(x)
row.names(x[x[,1]=="Date/Time"])
row.names(x[x$`Station Name`=="Date/Time"])
row.names(x[x[,1]=="Date/Time",])
row.names(x[x[,1]=="Date/Time",])[3]
tmp <- read_csv(writableOutput, n = 50, col_names = FALSE)
startingRow <- row.names(tmp[tmp[,1]=="Date/Time",])[3]
tmp <- read_csv(writableOutput, n = 50)
startingRow <- row.names(tmp[tmp[,1]=="Date/Time",])[3]
tmp <- read_csv(writableOutput, col_names = FALSE, n_max = 50)
startingRow <- row.names(tmp[tmp[,1]=="Date/Time",])[3]
a <- read_csv(writableOutput, col_names = TRUE, skip = startingRow)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
a <- read_csv(writableOutput, col_names = TRUE, skip = startingRow)
View(a)
a <- read_csv(writableOutput, col_names = TRUE, skip = startingRow-1)
View(a)
stationID <- "888"
year <- "1994"
month <- "1"
for (i in 1:20) {
year <- year + i
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",stationID,"&Year=",year,"&Month=",month,"&Day=14&timeframe=2&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,"_",month,".csv")
curl_download(query, writableOutput)
}
for (i in 1:20) {
year <- as.numeric(year) + i
year <- as.character(year)
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",stationID,"&Year=",year,"&Month=",month,"&Day=14&timeframe=2&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,"_",month,".csv")
curl_download(query, writableOutput)
}
stationID <- "888"
for (i in 1:20) {
year <- 1994 + i
year <- as.character(year)
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",stationID,"&Year=",year,"&Month=1&Day=14&timeframe=2&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,"_",month,".csv")
curl_download(query, writableOutput)
}
for (i in 1:21) {
year <- 1994 + i
year <- as.character(year)
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",stationID,"&Year=",year,"&Month=1&Day=14&timeframe=2&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,"_",month,".csv")
curl_download(query, writableOutput)
}
dir()
for (i in 1:21) {
year <- 1994 + i
year <- as.character(year)
query <- paste0("http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&stationID=",stationID,"&Year=",year,"&Month=1&Day=14&timeframe=2&submit=Download+Data")
writableOutput <- paste0(stationID,"_",year,".csv")
curl_download(query, writableOutput)
}
dir()
dir()[1]
library(plyr)
for i in (1:2) {
tmp <- read_csv(dir()[i], col_names = FALSE, n_max = 50)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
annual[i] <- as.data.frame(read_csv(dir()[i], col_names = TRUE, skip = startingRow-1))
}
annual <- c()
for i in (1:2) {
tmp <- read_csv(dir()[i], col_names = FALSE, n_max = 50)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
annual[i] <- as.data.frame(read_csv(dir()[i], col_names = TRUE, skip = startingRow-1))
}
annual <- c()
for i in (1:2) {
tmp <- read_csv(dir()[i], col_names = FALSE, n_max = 50)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
annual[[i]] <- as.data.frame(read_csv(dir()[i], col_names = TRUE, skip = startingRow-1))
}
str(annual)
annual <- c()
or i in (1:2) {
tmp <- read_csv(dir()[i], col_names = FALSE, n_max = 50)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
annual[i] <- as.data.frame(read_csv(dir()[i], col_names = TRUE, skip = startingRow-1))
}
str(annuak)
str(annual)
annual <- c()
for i in (1:2) {
tmp <- read_csv(dir()[i], col_names = FALSE, n_max = 50)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
annual2 <- as.data.frame(read_csv(dir()[i], col_names = TRUE, skip = startingRow-1))
}
annual <- c()
for i in (1:2)  {
tmp <- read_csv(dir()[i], col_names = FALSE, n_max = 50)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
annual[[i]] <- as.data.frame(read_csv(dir()[i], col_names = TRUE, skip = startingRow-1))
}
annual[[1]]
annual[[21]]
i
annual <- c()
for j in (1:2)  {
tmp <- read_csv(dir()[i], col_names = FALSE, n_max = 50)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
annual[[j]] <- as.data.frame(read_csv(dir()[i], col_names = TRUE, skip = startingRow-1))
}
for (j in 1:2)  {
tmp <- read_csv(dir()[i], col_names = FALSE, n_max = 50)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
annual[[j]] <- as.data.frame(read_csv(dir()[i], col_names = TRUE, skip = startingRow-1))
}
str(annual)
annual <- rbind.fill(annual)
annual <- c()
for (j in 1:21)  {
tmp <- read_csv(dir()[i], col_names = FALSE, n_max = 50)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
annual[[j]] <- as.data.frame(read_csv(dir()[i], col_names = TRUE, skip = startingRow-1))
}
annual <- rbind.fill(annual)
View(annual)
write_csv(annual, "annual_888.csv")
annual <- c()
for (j in 1:21)  {
tmp <- read_csv(dir()[j], col_names = FALSE, n_max = 50)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
annual[[j]] <- as.data.frame(read_csv(dir()[i], col_names = TRUE, skip = startingRow-1))
}
annual <- rbind.fill(annual)
View(annual)
annual <- c()
for (j in 1:21)  {
tmp <- read_csv(dir()[j], col_names = FALSE, n_max = 50)
startingRow <- as.numeric(row.names(tmp[tmp[,1]=="Date/Time",])[3])
annual[[j]] <- as.data.frame(read_csv(dir()[j], col_names = TRUE, skip = startingRow-1))
}
annual <- rbind.fill(annual)
View(annual)
View(annual2)
year2014 <- write_csv(annual[20])
year2014 <- annual[20])
year2014 <- annual[20]
year2014 <- annual[[20]]
year2014 <- annual[annual$Year==2014]
year2014 <- annual[annual$Year==2014,]
write_csv(year2014, "2014.csv")
calendarFlow <- function(dates, values, date.form = "%Y-%m-%d", span=NA, palette="red", main=NA) {
# Color palettes
ncolors <- 100
if (palette == "red") {
pal <- colorRampPalette(c("#fadbe0", "#821122")) # reddish
} else if (palette == "blue") {
pal <- colorRampPalette(c("#c9e4fc", "#07457b")) # blue
} else if (palette == "green") {
pal <- colorRampPalette(c("#dafedd", "#034e0a")) # green
} else {
pal <- colorRampPalette(c("#ffffff", "#263867"))
}
colorgrad <- pal(ncolors)
# Grid color
gridColor <- "#ffffff"
# Span of values, if not specified
maxval <- max(values)
minval <- min(values)
if (is.na(span)) {
span <- maxval - minval
}
# Find number of weeks
dates.ordered <- dates[order(as.Date(dates, format=date.form))]
startDate <- strptime(dates.ordered[1], format=date.form)
endDate <- strptime(dates.ordered[length(dates.ordered)], format=date.form)
timespan <- difftime(endDate, startDate, units="weeks")
numweeks <- as.numeric(timespan, units="weeks") + 2
# Setup blank plot
plot(0, 0, type="n", xlim=c(0, numweeks), ylim=c(0, 8), asp=1, xaxt='n', yaxt='n', ann=FALSE, bty="n")
# Draw days
for (i in 1:length(dates)) {
if (values[i] > 0) {
currDate <- strptime(dates[i], date.form)
dayofweek <- currDate$wday
# Figure out what color cell should be
diff <- difftime(currDate, startDate, units="weeks") + startDate$wday/6
weeknum <- ceiling( as.numeric(diff, units="weeks") )
n <- min(ncolors, ncolors * floor(values[i]-minval) / span + 1)
cellcolor <- colorgrad[n]
# Draw colored shaded rectangle
rect(weeknum, dayofweek, (weeknum+1), (dayofweek+1), col=cellcolor, border=NA)
}
}
# Draw calendar grid
for (i in 1:numweeks) {
lines(c(i, i), c(0, 7), col=gridColor, lwd=.5)
}
for (j in 0:7) {
lines(c(1, numweeks), c(j, j), col=gridColor, lwd=0.5)
}
# Month lines
dateseq <- seq(startDate, endDate, by="1 month")
for (i in 1:(length(dateseq)-1)) {
lastDay <- lastDayOfMonth( format(dateseq[i], date.form) )
diff <- difftime(lastDay, startDate, units="weeks") + startDate$wday/6
weeknum <- ceiling( as.numeric(diff, units="weeks") )
dayofweek <- strptime(lastDay, date.form)$wday
lines( c( (weeknum+1), (weeknum+1) ), c(0, (dayofweek+1)), col=gridColor, lwd=3, lend=2  )
if (dayofweek != 6) {
lines(c( (weeknum+1), weeknum ), c( (dayofweek+1), (dayofweek+1)), col=gridColor, lwd=3, lend=2 )
lines(c(weeknum, weeknum), c((dayofweek+1), 7), col=gridColor, lwd=3, lend=2)
}
}
# Title
# if (!is.na(main)) {
#   text(0, 8, main, pos=4, cex=0.7)
# } else {
#   text(0, 8, paste(startDate, "to", endDate), pos=4, cex=0.7)
# }
# Day labels
# daylabs <- c('S', 'M', 'T', 'W', 'R', 'F', 'S')
# for (k in 1:7) {
#     text(0, k-1/2, daylabs[k], cex=0.5)
# }
}
# Helper function to find the last day of month in datestring
lastDayOfMonth <- function(datestring, date.form = "%Y-%m-%d") {
thedate <- strptime(datestring, date.form)
theyear <- thedate$year + 1900
themonth <- thedate$mon + 1
themonth.posix <- as.POSIXct(paste(theyear, themonth, '1', sep='-'), format=date.form)
month.next <- seq(themonth.posix, length=2, by='1 month')[2]
last.day <- seq(month.next, length=2, by='-1 day')[2]
return(strptime(last.day, date.form))
}
library(foreign)
accidents <- read.dbf("FARS2010/accident.dbf")
accidents.agg <- aggregate(VE_TOTAL ~ YEAR + MONTH + DAY, data=accidents, sum)
library(foreign)
accidents <- read.dbf("accident.dbf")
accidents.agg <- aggregate(VE_TOTAL ~ YEAR + MONTH + DAY, data=accidents, sum)
View(accidents)
names(year2014)
year2014weather.agg <- aggregate(`Total precip (mm)` ~ Year + Month + Day, data = year2014, sum)
"DirMaxGustFlag","SpeedMaxGust","SpeedMaxGustFlag")
names(year2014) <- c("Date","Year","Month","Day","DataQuality","MaxTemp","MaxTempFlag",
"MinTemp","MinTempFlag","MeanTemp","MeanTempFlag","HeatDegDays",
"HeatDegDaysFlag","CoolDegDays","CoolDegDaysFlag","TotalRain",
"TotalRainFlag","TotalSnow","TotalSnowFlag","TotalPrecip",
"TotalPrecipFlag","SnowGround","SnowGroundFlag","DirMaxGust",
"DirMaxGustFlag","SpeedMaxGust","SpeedMaxGustFlag")
names(year2014)
year2014weather.agg <- aggregate(TotalPrecip ~ Year + Month + Day, data = year2014, sum)
dates <- paste(year2014weather.agg$Year, year2014weather.agg$Month, year2014weather.agg$Day, sep="-")
precipitation <- year2014weather.agg$TotalPrecip
# Make calendar
calendarFlow(dates, precipitation, palette="bluegray")
par(mfrow = c(5,2), oma=c(0, 0, 0, 0), mar=c(0, 0, 0, 0))
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="bluegray")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="red")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="red")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="blue")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="green")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="bluegray")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="bluegray")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="red")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="red")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="blue")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="green")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="bluegray")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="red")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="blue")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="bluegray")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="red")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="red")
calendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette="blue")
calendarFlow <- function(dates, values, date.form = "%Y-%m-%d", span=NA, palette="red", main=NA) {
# Color palettes
ncolors <- 100
if (palette == "red") {
pal <- colorRampPalette(c("#fadbe0", "#821122")) # reddish
} else if (palette == "blue") {
pal <- colorRampPalette(c("#c9e4fc", "#07457b")) # blue
} else if (palette == "green") {
pal <- colorRampPalette(c("#dafedd", "#034e0a")) # green
} else {
pal <- colorRampPalette(c("#ffffff", "#263867"))
}
colorgrad <- pal(ncolors)
# Grid color
gridColor <- "#ffffff"
# Span of values, if not specified
maxval <- max(values)
minval <- min(values)
if (is.na(span)) {
span <- maxval - minval
}
# Find number of weeks
dates.ordered <- dates[order(as.Date(dates, format=date.form))]
startDate <- strptime(dates.ordered[1], format=date.form)
endDate <- strptime(dates.ordered[length(dates.ordered)], format=date.form)
timespan <- difftime(endDate, startDate, units="weeks")
numweeks <- as.numeric(timespan, units="weeks") + 2
# Setup blank plot
plot(0, 0, type="n", xlim=c(0, numweeks), ylim=c(0, 8), asp=1, xaxt='n', yaxt='n', ann=FALSE, bty="n")
# Draw days
for (i in 1:length(dates)) {
if (values[i] > 0) {
currDate <- strptime(dates[i], date.form)
dayofweek <- currDate$wday
# Figure out what color cell should be
diff <- difftime(currDate, startDate, units="weeks") + startDate$wday/6
weeknum <- ceiling( as.numeric(diff, units="weeks") )
n <- min(ncolors, ncolors * floor(values[i]-minval) / span + 1)
cellcolor <- colorgrad[n]
# Draw colored shaded rectangle
rect(weeknum, dayofweek, (weeknum+1), (dayofweek+1), col=cellcolor, border=NA)
}
}
# Draw calendar grid
for (i in 1:numweeks) {
lines(c(i, i), c(0, 7), col=gridColor, lwd=.5)
}
for (j in 0:7) {
lines(c(1, numweeks), c(j, j), col=gridColor, lwd=0.5)
}
# Month lines
dateseq <- seq(startDate, endDate, by="1 month")
for (i in 1:(length(dateseq)-1)) {
lastDay <- lastDayOfMonth( format(dateseq[i], date.form) )
diff <- difftime(lastDay, startDate, units="weeks") + startDate$wday/6
weeknum <- ceiling( as.numeric(diff, units="weeks") )
dayofweek <- strptime(lastDay, date.form)$wday
lines( c( (weeknum+1), (weeknum+1) ), c(0, (dayofweek+1)), col=gridColor, lwd=3, lend=2  )
if (dayofweek != 6) {
lines(c( (weeknum+1), weeknum ), c( (dayofweek+1), (dayofweek+1)), col=gridColor, lwd=3, lend=2 )
lines(c(weeknum, weeknum), c((dayofweek+1), 7), col=gridColor, lwd=3, lend=2)
}
}
Title
if (!is.na(main)) {
text(0, 8, main, pos=4, cex=0.7)
} else {
text(0, 8, paste(startDate, "to", endDate), pos=4, cex=0.7)
}
# Day labels
# daylabs <- c('S', 'M', 'T', 'W', 'R', 'F', 'S')
# for (k in 1:7) {
#     text(0, k-1/2, daylabs[k], cex=0.5)
# }
}
calendarFlow(dates, precipitation, palette="bluegray")
calendarFlow <- function(dates, values, date.form = "%Y-%m-%d", span=NA, palette="red", main=NA) {
# Color palettes
ncolors <- 100
if (palette == "red") {
pal <- colorRampPalette(c("#fadbe0", "#821122")) # reddish
} else if (palette == "blue") {
pal <- colorRampPalette(c("#c9e4fc", "#07457b")) # blue
} else if (palette == "green") {
pal <- colorRampPalette(c("#dafedd", "#034e0a")) # green
} else {
pal <- colorRampPalette(c("#ffffff", "#263867"))
}
colorgrad <- pal(ncolors)
# Grid color
gridColor <- "#ffffff"
# Span of values, if not specified
maxval <- max(values)
minval <- min(values)
if (is.na(span)) {
span <- maxval - minval
}
# Find number of weeks
dates.ordered <- dates[order(as.Date(dates, format=date.form))]
startDate <- strptime(dates.ordered[1], format=date.form)
endDate <- strptime(dates.ordered[length(dates.ordered)], format=date.form)
timespan <- difftime(endDate, startDate, units="weeks")
numweeks <- as.numeric(timespan, units="weeks") + 2
# Setup blank plot
plot(0, 0, type="n", xlim=c(0, numweeks), ylim=c(0, 8), asp=1, xaxt='n', yaxt='n', ann=FALSE, bty="n")
# Draw days
for (i in 1:length(dates)) {
if (values[i] > 0) {
currDate <- strptime(dates[i], date.form)
dayofweek <- currDate$wday
# Figure out what color cell should be
diff <- difftime(currDate, startDate, units="weeks") + startDate$wday/6
weeknum <- ceiling( as.numeric(diff, units="weeks") )
n <- min(ncolors, ncolors * floor(values[i]-minval) / span + 1)
cellcolor <- colorgrad[n]
# Draw colored shaded rectangle
rect(weeknum, dayofweek, (weeknum+1), (dayofweek+1), col=cellcolor, border=NA)
}
}
# Draw calendar grid
for (i in 1:numweeks) {
lines(c(i, i), c(0, 7), col=gridColor, lwd=.5)
}
for (j in 0:7) {
lines(c(1, numweeks), c(j, j), col=gridColor, lwd=0.5)
}
# Month lines
dateseq <- seq(startDate, endDate, by="1 month")
for (i in 1:(length(dateseq)-1)) {
lastDay <- lastDayOfMonth( format(dateseq[i], date.form) )
diff <- difftime(lastDay, startDate, units="weeks") + startDate$wday/6
weeknum <- ceiling( as.numeric(diff, units="weeks") )
dayofweek <- strptime(lastDay, date.form)$wday
lines( c( (weeknum+1), (weeknum+1) ), c(0, (dayofweek+1)), col=gridColor, lwd=3, lend=2  )
if (dayofweek != 6) {
lines(c( (weeknum+1), weeknum ), c( (dayofweek+1), (dayofweek+1)), col=gridColor, lwd=3, lend=2 )
lines(c(weeknum, weeknum), c((dayofweek+1), 7), col=gridColor, lwd=3, lend=2)
}
}
#Title
if (!is.na(main)) {
text(0, 8, main, pos=4, cex=0.7)
} else {
text(0, 8, paste(startDate, "to", endDate), pos=4, cex=0.7)
}
# Day labels
# daylabs <- c('S', 'M', 'T', 'W', 'R', 'F', 'S')
# for (k in 1:7) {
#     text(0, k-1/2, daylabs[k], cex=0.5)
# }
}
par(mfrow = c(5,2), oma=c(0, 0, 0, 0), mar=c(0, 0, 0, 0))
calendarFlow(dates, precipitation, palette="bluegray")
