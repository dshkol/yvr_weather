{
    "contents" : "calendarFlow <- function(dates, values, date.form = \"%Y-%m-%d\", span=NA, palette=\"red\", main=NA) {\n  \n  # Color palettes\n  ncolors <- 100\n  if (palette == \"red\") {\n    pal <- colorRampPalette(c(\"#fadbe0\", \"#821122\")) # reddish\n  } else if (palette == \"blue\") {\n    pal <- colorRampPalette(c(\"#c9e4fc\", \"#07457b\")) # blue\n  } else if (palette == \"green\") {\n    pal <- colorRampPalette(c(\"#dafedd\", \"#034e0a\")) # green\n  } else {\n    pal <- colorRampPalette(c(\"#ffffff\", \"#263867\")) \n  }\n  colorgrad <- pal(ncolors)\n  \n  # Grid color\n  gridColor <- \"#ffffff\"\n  \n  # Span of values, if not specified\n  maxval <- max(values)\n  minval <- min(values)\n  if (is.na(span)) {\n    span <- maxval - minval\n  }\n  \n  # Find number of weeks\n  dates.ordered <- dates[order(as.Date(dates, format=date.form))]\n  startDate <- strptime(dates.ordered[1], format=date.form)\n  endDate <- strptime(dates.ordered[length(dates.ordered)], format=date.form)\n  timespan <- difftime(endDate, startDate, units=\"weeks\")\n  numweeks <- as.numeric(timespan, units=\"weeks\") + 2\n  \n  # Setup blank plot\n  plot(0, 0, type=\"n\", xlim=c(0, numweeks), ylim=c(0, 8), asp=1, xaxt='n', yaxt='n', ann=FALSE, bty=\"n\")\n  \n  # Draw days\n  for (i in 1:length(dates)) {\n    if (values[i] > 0) {\n      currDate <- strptime(dates[i], date.form)\n      dayofweek <- currDate$wday\n      \n      # Figure out what color cell should be\n      diff <- difftime(currDate, startDate, units=\"weeks\") + startDate$wday/6\n      weeknum <- ceiling( as.numeric(diff, units=\"weeks\") )\n      n <- min(ncolors, ncolors * floor(values[i]-minval) / span + 1)\n      cellcolor <- colorgrad[n]\n      \n      # Draw colored shaded rectangle\n      rect(weeknum, dayofweek, (weeknum+1), (dayofweek+1), col=cellcolor, border=NA)\n      \n    }\n  }\n  \n  # Draw calendar grid\n  for (i in 1:numweeks) {\n    lines(c(i, i), c(0, 7), col=gridColor, lwd=.5)\n  }\n  for (j in 0:7) {\n    lines(c(1, numweeks), c(j, j), col=gridColor, lwd=0.5)\n  }\n  \n  \n  # Month lines\n  dateseq <- seq(startDate, endDate, by=\"1 month\")\n  for (i in 1:(length(dateseq)-1)) {\n    \n    lastDay <- lastDayOfMonth( format(dateseq[i], date.form) )\n    diff <- difftime(lastDay, startDate, units=\"weeks\") + startDate$wday/6\n    weeknum <- ceiling( as.numeric(diff, units=\"weeks\") )\n    dayofweek <- strptime(lastDay, date.form)$wday\n    lines( c( (weeknum+1), (weeknum+1) ), c(0, (dayofweek+1)), col=gridColor, lwd=3, lend=2  )\n    \n    if (dayofweek != 6) {\n      lines(c( (weeknum+1), weeknum ), c( (dayofweek+1), (dayofweek+1)), col=gridColor, lwd=3, lend=2 )\n      lines(c(weeknum, weeknum), c((dayofweek+1), 7), col=gridColor, lwd=3, lend=2)\n    }\n  }\n  \n  \n  #Title\n  if (!is.na(main)) {\n    text(0, 8, main, pos=4, cex=0.7)\n  } else {\n    text(0, 8, paste(startDate, \"to\", endDate), pos=4, cex=0.7)\n  }\n  \n  # Day labels\n  # daylabs <- c('S', 'M', 'T', 'W', 'R', 'F', 'S')\n  # for (k in 1:7) {\n  #     text(0, k-1/2, daylabs[k], cex=0.5)\n  # }\n  \n  \n}\n\n\n# Helper function to find the last day of month in datestring\nlastDayOfMonth <- function(datestring, date.form = \"%Y-%m-%d\") {\n  \n  thedate <- strptime(datestring, date.form)\n  theyear <- thedate$year + 1900\n  themonth <- thedate$mon + 1\n  \n  themonth.posix <- as.POSIXct(paste(theyear, themonth, '1', sep='-'), format=date.form)\n  month.next <- seq(themonth.posix, length=2, by='1 month')[2]\n  last.day <- seq(month.next, length=2, by='-1 day')[2]\n  \n  return(strptime(last.day, date.form))\n}\n\n# Sample usage for calendarFlow()\n# source(\"calendarCustom.R\")\n\n# Load data from .dbf file and aggregate by day\nlibrary(foreign)\naccidents <- read.dbf(\"accident.dbf\")\naccidents.agg <- aggregate(VE_TOTAL ~ YEAR + MONTH + DAY, data=accidents, sum)\n\nnames(year2014) <- c(\"Date\",\"Year\",\"Month\",\"Day\",\"DataQuality\",\"MaxTemp\",\"MaxTempFlag\",\n                     \"MinTemp\",\"MinTempFlag\",\"MeanTemp\",\"MeanTempFlag\",\"HeatDegDays\",\n                     \"HeatDegDaysFlag\",\"CoolDegDays\",\"CoolDegDaysFlag\",\"TotalRain\",\n                     \"TotalRainFlag\",\"TotalSnow\",\"TotalSnowFlag\",\"TotalPrecip\",\n                     \"TotalPrecipFlag\",\"SnowGround\",\"SnowGroundFlag\",\"DirMaxGust\",\n                     \"DirMaxGustFlag\",\"SpeedMaxGust\",\"SpeedMaxGustFlag\")\n\nyear2014weather.agg <- aggregate(TotalPrecip ~ Year + Month + Day, data = year2014, sum)\n\n# Prepare for calendarFlow()\n\ndates <- paste(year2014weather.agg$Year, year2014weather.agg$Month, year2014weather.agg$Day, sep=\"-\")\nprecipitation <- year2014weather.agg$TotalPrecip\n\n# Make calendar\ncalendarFlow(dates, precipitation, palette=\"bluegray\")\n\n# Make multiple calendars\npar(mfrow = c(5,2), oma=c(0, 0, 0, 0), mar=c(0, 0, 0, 0))\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"bluegray\")\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"red\")\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"red\")\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"blue\")\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"green\")\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"bluegray\")\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"bluegray\")\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"red\")\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"red\")\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"blue\")\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"green\")\ncalendarFlow(dates, rnorm(length(dates), mean = 10, sd = 1), palette=\"bluegray\")",
    "created" : 1448945581838.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3253243373",
    "id" : "8E2C91CA",
    "lastKnownWriteTime" : 1449096624,
    "path" : "~/Documents/yvr_weather/calendarFlow.R",
    "project_path" : "calendarFlow.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}